컨트롤+쉬프트+o는 임포트 모듈 자동찾기 단축키
컨트롤+f11은 run 단축키
세미콜론은 문장이 끝났음을 의미
메소드 반복문은 중괄호 사용
{}블럭지정 열림-닫힘 세미콜론 안붙임
세미콜론을 이용하면 여러개의 문장을 한줄에 표현가능
int a=100;double b = 10.1; 예시
sysytem.out.println();//잘아는 출력 명령어

따움표등 명령어기호를 사용하려면 sysytem.out.println("haha\"haha\"");
이처럼 명령어기호앞에 \를 쓰면 haha"haha"가 출력된다.

System.out.println("HTML\nCSS\nJavaScript\n");//여러줄을 표시할때 즉 줄전환은\n C와 같다

문자끼리 더할땐 이렇게 System.out.println("생활"+"코딩");

정수선언 int a
 int a=3;
System.out.println(a);

//는 주석처리 /* */도 통함

정수형 int
실수형 double, float
문자열 String
문자형 Character
%f 는 float 에서 실수의 정수값 정의시 붙여줌
float 에러시에 float a=1.1f라고하면됨
/**  */ 주석바깥에 위치한 클래스함수의 설명에 대한 주석을 외부문서로 만들어줌
/**
 * Prints an integer and then terminate the line.  This method behaves as
 * though it invokes <code>{@link #print(int)}</code> and then
 * <code>{@link #println()}</code>.
 *
 * @param x  The <code>int</code> to be printed.
 */ 예시

byte->short->int->long->float->int
char->int
double a = 3.0F; 작은데이타 타입에서 큰데이터타입으로 형변환가능

int a = 3;
float b = 1.0F;
double c = a + b;//자동형변환 a와 b는 결곡 더블로 형변환

작은->큰 으로자동형변환이 아닌 큰->작은으로 형변환하려면
float a = (float)100.0;
int b = (int)100.0F;//괄호를 붙여처리한다 그러나 데이터가 소실될 수 있다. 소숫점 아래자리 등등

산술연산자 arithmatic
더하기+ 빼기- 곱하기* 나누기/ 나머지% 이항연산자(infix operator)
단항연산자 unary operator은 ++3(//1씩증가) --3(//1씩증가) +=3(3씩증가) -=3(3씩감소)
++3이나 3++나 같음 허나 3++같은경우 println문 안에 넣을때 조금 다른데 실행은 되지만 프린터문밖에 바로내주지 않고 다음실행문에서 실행된다(사실은 프린터문이 바로 실행못하고 의미만 전달된것)
예제는 다음과같다

==같다 !=다르다 산술연산자(%나누기포함)>비교연산자>논리연산자(&&,||)>대입연산자
.equals는 문자열 비교 메소드 a.equals (b)는 a와b는 같은 데이터인가 비교
    public static void main(String[] args) {
        String a = "Hello world";
        String b = new String("Hello world");
        System.out.println(a == b); //false 왜냐면 ==는 숫자에 효용되지 문자는 equals를 써야함
        System.out.println(a.equals(b)); //True .equals()는 문자비교 메소드 참, 거짓

if(true or false){if then절}

     if (false) {
            System.out.println(1);
        } else if (true) {
            System.out.println(2);
        } else if (true) {
            System.out.println(3);
        } else {
            System.out.println(4);
        }// 2출력 이유는 false가 되면 다음구간으로 넘어가고 true면 그구간의 출력값을 호출한다. else, else if 생략가능


 public static void main(String[] args) {
        String id = args[0];
        if(id.equals("egoing")){
            System.out.println("right");
        } else {
            System.out.println("wrong");
        }
    }
}//.equals()는 문자값이 같다면 true 아니라면 false,args[0]는 입력값하나넣으시오 args[0]은 배열 첫번째값
 public static void main(String[] args) {
        String id = args[0];
        String password = args[1];
        if (id.equals("egoing")) {
            if (password.equals("111111")) {
                System.out.println("right");
            } else {
                System.out.println("wrong");
            }
 
        } else {
            System.out.println("wrong");
        }
    }
}//이중 if문 args[1]은 args의 두번째 배열값 자바에서 입력프로그램 실행시 런의 옆화살표 런 컨피규레이션 add-argument에 입력 두값 넣으려면 스페이스바공백혹은 줄바꿈뒤에 적기

  System.out.println("switch(1)");
        switch(1){
        case 1:
            System.out.println("one");
        case 2:
            System.out.println("two");
        case 3:
            System.out.println("three");
	System.out.println("default");
        }
         
        System.out.println("switch(2)");
        switch(2){
        case 1:
            System.out.println("one");
        case 2:
            System.out.println("two");
		break;
        case 3:
            System.out.println("three");
        }
         
        System.out.println("switch(3)");
        switch(3){
        case 1:
            System.out.println("one");
        case 2:
            System.out.println("two");
        case 3:
            System.out.println("three");
        }//스위치문 break; 필요 왜냐면 케이스1이 실행되면 2,3등 숫자이상의 케이스가 실행되기때문
default는 일치하는게 없을경우 출력해줌
스위치문은 byte,short,char,int,enum,String,Character,Byte,Short,Integer 데이터 타입만가능(실수 불가능)
논리연산자 and && or || 부정은 ! 다르다는 != 다르다는 비교연산자임 not즉 i는 대상 앞에 쓰고 i= 대상과 대상의 비교에 씀 !true, true != false
while(조건)
{반복 실행 영역} 무한반복문을 중지하려면 빨간ㅁ모양 버튼을 선택하거나 cmd콘솔에서는 컨트롤+c를 사용해 중지할수 있다.
자바실행시 프로세스하나는 자바, 나머지하나는 이클립스(자바)

for문 
for(초기화; 종료조건;반복실행){
반복적으로 실행될구문
}
break문
     for (int i = 0; i < 10; i++) {
            if (i == 5)
                {break;}
            System.out.println("Coding Everybody " + i);
        }//{break;}에서 {}안이 한줄짜리면 생략가능 5부터 출력안됨
continue문
   for (int i = 0; i < 10; i++) {
            if (i == 5)
                continue;
            System.out.println("Coding Everybody " + i);
        }// 5즉 5와 매치되는 출력값이 실행안되고 즉 생략되고 6부터실행

      for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                System.out.println(i + "" + j);
            }
        }이중for문 ""때문에 1+1이아닌 11,12,13씩으로 올라감

String[] classGroup = { "최진혁", "최유빈", "한이람", "이고잉" };
        System.out.println(classGroup[0]);
        System.out.println(classGroup[1]);
        System.out.println(classGroup[2]);
        System.out.println(classGroup[3]);
//배열 string[]는 문자열(배열!)을 정의하겠다는거임 배열정의시 데이터타입앞에 []<-index인덱스라고불림

        String[] classGroup = new String[4];
        classGroup[0] = "최진혁";
        System.out.println(classGroup.length);
        classGroup[1] = "최유빈";
        System.out.println(classGroup.length);
        classGroup[2] = "한이람";
        System.out.println(classGroup.length);
        classGroup[3] = "이고잉";
        System.out.println(classGroup.length);// new String[4]는 배열이 4개가 들어갈 공간이 있다는뜻 (현재 담겼다는 뜻은아님) .length는 데이터길이(배열이 몇개값가지고있는지)
new는 전용api String[4]에서 몇개 배열이 담기는지 [갯수]를 꼭적어줘야함


        String[] members = { "최진혁", "최유빈", "한이람" };
        for (int i = 0; i < members.length; i++) {
            String member = members[i];
            System.out.println(member + "이 상담을 받았습니다");
        }//루프 어레이 응용 멤버즈 길이는3

 String[] members = { "최진혁", "최유빈", "한이람" };
        for (String e : members) {
            System.out.println(e + "이 상담을 받았습니다");// String e: members를 쓰면 members의 각 배열변수[0],[1],[2]가 e에 담긴다.

public class MethodDemo1 {
    public static void numbering() {
        int i = 0;
        while (i < 10) {
            System.out.println(i);
            i++;
        }
    }
 
    public static void main(String[] args) {
        numbering();
    }
}//메소드 기본 사용법

package org.opentutorials.javatutorial.test;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class method1 {

	public static String numbering(int init,int limit) {
		// TODO Auto-generated method stub
		int i = init;
        String output = "";
        while (i < limit) {
            output += i;
            i++;
        }
        return output;
    }
 
    public static void main(String[] args) {
        String result = numbering(1, 5);
        System.out.println(result);
        try { // 무시
            // 다음 행은 out.txt 라는 파일에 numbering이라는 메소드가 반환한 값을 저장합니다.
            BufferedWriter out = new BufferedWriter(new FileWriter("out.txt"));
            out.write(result);
            out.close();
        } catch (IOException e) {
        } // 무시
    }
}
}//출력값이 있는 메소드 사용법 
